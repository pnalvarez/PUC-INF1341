Nome: Thiago Lages de Alencar
Matricula: 1721629

=================================================================
================================================================= 1)
=================================================================

CREATE OR REPLACE PROCEDURE excluir_cliente(id_cliente INTEGER) AS
	nome_cliente VARCHAR2(30);
BEGIN
	SELECT NOME INTO nome_cliente
		FROM CLIENTE
		WHERE ID = id_cliente;

	INSERT INTO HCLI VALUES (id_cliente, nome_cliente);

	DELETE
		FROM CLIENTE
		WHERE ID = id_cliente;
END;

=======================================

Testei deletar id 1 e 2

========================================

CALL excluir_cliente(1);
CALL excluir_cliente(2);

=================================================================
================================================================= 2)
=================================================================

CREATE OR REPLACE TRIGGER cliente_excluido
	BEFORE DELETE ON CLIENTE FOR EACH ROW
BEGIN
	INSERT INTO hcli VALUES (:OLD.ID, :OLD.NOME);
END;

=======================================

Deixei para testar com a próxima questão

=================================================================
================================================================= 3)
=================================================================

CREATE OR REPLACE PROCEDURE exluir_cliente(id_cliente INTEGER) AS
BEGIN
	DELETE
		FROM CLIENTE
		WHERE ID = id_cliente;
END excluir_cliente;

=======================================

Testei deletar id 3

========================================

CALL excluir_cliente(2);

=================================================================
================================================================= 4)
=================================================================

CREATE OR REPLACE FUNCTION procuraid(nome_cliente VARCHAR2)
    RETURN NUMBER
AS
	id_cliente NUMBER;
BEGIN
	SELECT ID INTO id_cliente 
		FROM CLIENTE
		WHERE NOME = nome_cliente;

	RETURN id_cliente;
END;

=======================================

Testei usando o código seguinte

========================================

set serveroutput on format wrapped;
declare
    nome VARCHAR(30);
    id INTEGER;
begin
    id := procuraid('BIA');
    dbms_output.put_line(id);
end;

=================================================================
================================================================= 5)
=================================================================

CREATE OR REPLACE PROCEDURE alterar_nome(id_cliente INTEGER, novo_nome_cliente VARCHAR) AS
BEGIN
	UPDATE CLIENTE
		SET NOME = novo_nome_cliente
		WHERE ID = id_cliente;
END;

========================================

Testei usando o código seguinte

========================================

call alterar_nome(10, 'THI');

=================================================================
================================================================= 6)
=================================================================

CREATE OR REPLACE TRIGGER cliente_nome_alterado
	BEFORE UPDATE ON CLIENTE FOR EACH ROW
BEGIN
	INSERT INTO troca_nome_cliente VALUES (:OLD.ID, :OLD.NOME, :NEW.NOME);
END;

========================================

Testei usando o código seguinte

========================================

call alterar_nome(10, 'BIA');

=================================================================
================================================================= 7)
=================================================================

SELECT * FROM conta_corrente WHERE ID_CLIENTE = procuraid(nome_qualquer)

========================================

Testei utilizando o comando.  

=================================================================
================================================================= 8)
=================================================================

CREATE OR REPLACE FUNCTION addsaldo(id NUMBER, adicionar_valor INTEGER)
	RETURN INTEGER
AS
	valor INTEGER;
BEGIN
	SELECT saldo INTO valor 
		FROM conta_corrente
		WHERE Id_cliente = id;

	valor := valor + adicionar_valor;

	UPDATE conta_corrente
		SET saldo = valor
		WHERE ID_CLIENTE = id;

	RETURN valor;
END;

========================================

Testei usando o código seguinte.

========================================

set serveroutput on format wrapped;
declare
    id INTEGER;
begin
    id := addsaldo(10, 0);
    dbms_output.put_line(id);
end;

=================================================================
================================================================= 9)
=================================================================

É uma procedure que permite o desenvolvedor levantar uma exceção e associar o código do erro e mensagem com a procedure.
O primeiro parâmetro da função é um número entre -20000 e -20999.

=========================================

Alterei o codigo da questão 8 para usar raise_application_error

=========================================

create or replace FUNCTION addsaldo(id NUMBER, adicionar_valor INTEGER)
	RETURN INTEGER
AS
	valor INTEGER;
BEGIN

    IF adicionar_valor = 0 THEN
        raise_application_error(-20000, 'ninguem iria adicionar 0');
    END IF;
    
	SELECT saldo INTO valor 
		FROM conta_corrente
		WHERE Id_cliente = id;

	valor := valor + adicionar_valor;

	UPDATE conta_corrente
		SET saldo = valor
		WHERE ID_CLIENTE = id;

	RETURN valor;
END;

==========================================

set serveroutput on format wrapped;
declare
    id INTEGER;
begin
    id := addsaldo(10, 0);
    dbms_output.put_line(id);
end;

